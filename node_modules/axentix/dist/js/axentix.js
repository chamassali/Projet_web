"use strict";

/**
 * Class AxentixComponent
 * @class
 */
class AxentixComponent {
  /**
   * Sync all listeners
   */
  sync() {
    Axentix.createEvent(this.el, 'component.sync');

    this._removeListeners();

    this._setupListeners();
  }
  /**
   * Reset component
   */


  reset() {
    Axentix.createEvent(this.el, 'component.reset');

    this._removeListeners();

    this._setup();
  }

}
/**
 * Class Axentix
 * @class
 */


class Axentix {
  /**
   * Construct Axentix instance
   * @constructor
   * @param {String} component
   * @param {Object} options
   */
  constructor(component, options) {
    this.component = component[0].toUpperCase() + component.slice(1);
    this.isAll = component === 'all' ? true : false;
    this.options = this.isAll ? {} : options;
    this.instances = [];

    this._init();
  }
  /**
   * Init components
   */


  _init() {
    var componentList = {
      Collapsible: document.querySelectorAll('.collapsible:not(.no-axentix-init)'),
      Sidenav: document.querySelectorAll('.sidenav:not(.no-axentix-init)'),
      Modal: document.querySelectorAll('.modal:not(.no-axentix-init)'),
      Dropdown: document.querySelectorAll('.dropdown:not(.no-axentix-init)'),
      Tab: document.querySelectorAll('.tab:not(.no-axentix-init)'),
      Fab: document.querySelectorAll('.fab:not(i):not(.no-axentix-init)'),
      Caroulix: document.querySelectorAll('.caroulix:not(.no-axentix-init)')
    };
    var isInList = componentList.hasOwnProperty(this.component);

    if (isInList) {
      var ids = this._detectIds(componentList[this.component]);

      this._instanciate(ids, this.component);
    } else if (this.isAll) {
      Object.keys(componentList).map(component => {
        var ids = this._detectIds(componentList[component]);

        ids.length > 0 ? this._instanciate(ids, component) : '';
      });
    }
  }
  /**
   * Detects all ids
   * @param {NodeListOf<Element>} component
   * @return {Array<String>}
   */


  _detectIds(component) {
    var idList = [];
    component.forEach(el => {
      idList.push('#' + el.id);
    });
    return idList;
  }
  /**
   * Instanciate components
   * @param {Array<String>} ids
   * @param {String} component
   */


  _instanciate(ids, component) {
    ids.map(id => {
      var constructor = Axentix[component];
      var args = [id, this.options];

      try {
        this.instances.push(new constructor(...args));
      } catch (error) {
        console.error('Axentix : Unable to load ' + component);
      }
    });
  }
  /**
   * Get instance of element
   * @param {String} element Id of element
   */


  getInstance(element) {
    return this.instances.filter(instance => '#' + instance.el.id === element)[0];
  }
  /**
   * Get all instances
   */


  getAllInstances() {
    return this.instances;
  }
  /**
   * Sync instance of element
   * @param {String} element Id of element
   */


  sync(element) {
    this.getInstance(element).sync();
  }
  /**
   * Sync all instances
   */


  syncAll() {
    this.instances.map(instance => instance.sync());
  }
  /**
   * Reset instance of element
   * @param {String} element Id of element
   */


  reset(element) {
    this.getInstance(element).reset();
  }
  /**
   * Reset all instances
   */


  resetAll() {
    this.instances.map(instance => instance.reset());
  }

}
/**
 * Class Caroulix
 * @class
 */


class Caroulix extends AxentixComponent {
  /**
   * Construct Caroulix instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultOptions = {
      fixedHeight: true,
      height: '',
      animationDelay: 500,
      animationType: 'slide',
      indicators: {
        enabled: false,
        isFlat: false,
        customClasses: ''
      },
      autoplay: {
        enabled: true,
        interval: 5000,
        side: 'right'
      }
    };
    this.el = document.querySelector(element);
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }

  _setup() {
    Axentix.createEvent(this.el, 'caroulix.setup');
    var animationList = ['slide'];
    animationList.includes(this.options.animationType) ? '' : this.options.animationType = 'slide';
    var autoplaySides = ['right', 'left'];
    autoplaySides.includes(this.options.autoplay.side) ? '' : this.options.autoplay.side = 'right';
    this.currentItemIndex = 0;
    this.isAnimated = false;

    this._getChildrens();

    this.options.indicators.enabled ? this._enableIndicators() : '';

    this._getActiveElementIndex();

    this._setupListeners();

    this.el.classList.add('anim-' + this.options.animationType);
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    this.windowResizeRef = this._handleResizeEvent.bind(this);
    window.addEventListener('resize', this.windowResizeRef);

    if (this.arrowPrev && this.arrowNext) {
      this.arrowPrevRef = this.prev.bind(this, 1);
      this.arrowNextRef = this.next.bind(this, 1);
      this.arrowPrev.addEventListener('click', this.arrowPrevRef);
      this.arrowNext.addEventListener('click', this.arrowNextRef);
    }
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    window.removeEventListener('resize', this.windowResizeRef);
    this.windowResizeRef = undefined;

    if (this.arrowPrev && this.arrowNext) {
      this.arrowPrev.removeEventListener('click', this.arrowPrevRef);
      this.arrowNext.removeEventListener('click', this.arrowNextRef);
      this.arrowPrevRef = undefined;
      this.arrowNextRef = undefined;
    }
  }
  /**
   * Handle resize event
   */


  _handleResizeEvent(e) {
    this.updateHeight();
  }
  /**
   * Get caroulix childrens
   */


  _getChildrens() {
    this.childrens = Array.from(this.el.children).reduce((acc, child) => {
      child.classList.contains('caroulix-item') ? acc.push(child) : '';
      child.classList.contains('caroulix-prev') ? this.arrowPrev = child : '';
      child.classList.contains('caroulix-next') ? this.arrowNext = child : '';
      return acc;
    }, []);
  }

  _getActiveElementIndex() {
    this.childrens.map((child, i) => {
      if (child.classList.contains('active')) {
        this.currentItemIndex = i;
      }
    });
    var item = this.childrens[this.currentItemIndex];
    item.classList.contains('active') ? '' : item.classList.add('active');
    this.options.indicators.enabled ? this.indicators.children[this.currentItemIndex].classList.add('active') : '';

    this._waitUntilLoad(item);
  }

  _waitUntilLoad(item) {
    var isImage = false;

    if (this.options.fixedHeight) {
      this.totalLoadChild = 0;
      this.totalLoadedChild = 0;
      this.childrens.map(child => {
        var waitItem = child.querySelector('img, video');

        if (waitItem) {
          isImage = true;
          this.totalLoadChild++;

          if (waitItem.complete) {
            this._initWhenLoaded(waitItem, true);
          } else {
            waitItem.loadRef = this._initWhenLoaded.bind(this, waitItem);
            waitItem.addEventListener('load', waitItem.loadRef);
          }
        }
      });
    } else {
      var childItem = item.querySelector('img, video');

      if (childItem) {
        isImage = true;

        if (childItem.complete) {
          this._initWhenLoaded(childItem, true);
        } else {
          childItem.loadRef = this._initWhenLoaded.bind(this, childItem);
          childItem.addEventListener('load', childItem.loadRef);
        }
      }
    }

    if (!isImage) {
      this.updateHeight();
      this.options.autoplay.enabled ? this.play() : '';
    }
  }
  /**
   * Update height & remove listener when active element is loaded
   * @param {Element} item
   * @param {Boolean} alreadyLoad
   */


  _initWhenLoaded(item, alreadyLoad) {
    if (this.options.fixedHeight) {
      if (!alreadyLoad) {
        item.removeEventListener('load', item.loadRef);
        item.loadRef = undefined;
      }

      this.totalLoadedChild++;

      if (this.totalLoadedChild === this.totalLoadChild) {
        this.updateHeight();
        this.totalLoadedChild = undefined;
        this.totalLoadChild = undefined;
        this.options.autoplay.enabled ? this.play() : '';
      }
    } else {
      this.updateHeight();
      item.removeEventListener('load', item.loadRef);
      item.loadRef = undefined;
      this.options.autoplay.enabled ? this.play() : '';
    }
  }

  _setMaxHeight() {
    if (this.options.height) {
      this.el.style.height = this.options.height;
      return;
    }

    var childrensHeight = this.childrens.map(child => {
      return child.offsetHeight;
    });
    this.maxHeight = Math.max(...childrensHeight);
    this.el.style.height = this.maxHeight + 'px';
  }
  /**
   * Dynamic height option
   * @param {number} index
   */


  _setDynamicHeight() {
    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentItemIndex;
    var height = this.childrens[index].offsetHeight;
    this.el.style.height = height + 'px';
  }
  /**
   * Enable indicators
   */


  _enableIndicators() {
    this.indicators = document.createElement('ul');
    this.indicators.classList.add('caroulix-indicators');
    this.options.indicators.isFlat ? this.indicators.classList.add('caroulix-flat') : '';
    this.options.indicators.customClasses ? this.indicators.className = this.indicators.className + ' ' + this.options.indicators.customClasses : '';

    for (var i = 0; i < this.childrens.length; i++) {
      var li = document.createElement('li');
      li.triggerRef = this._handleIndicatorClick.bind(this, i);
      li.addEventListener('click', li.triggerRef);
      this.indicators.appendChild(li);
    }

    this.el.appendChild(this.indicators);
  }
  /***** Animation Section *****/

  /**
   * Slide animation
   * @param {number} number
   * @param {string} side
   */


  _animationSlide(number, side) {
    var nextItem = this.childrens[number];
    var currentItem = this.childrens[this.currentItemIndex];
    var nextItemPercentage = '',
        currentItemPercentage = '';

    if (side === 'right') {
      nextItemPercentage = '100%';
      currentItemPercentage = '-100%';
    } else {
      nextItemPercentage = '-100%';
      currentItemPercentage = '100%';
    }

    nextItem.style.transform = "translateX(".concat(nextItemPercentage, ")");
    nextItem.classList.add('active');
    setTimeout(() => {
      nextItem.style.transitionDuration = this.options.animationDelay + 'ms';
      nextItem.style.transform = '';
      currentItem.style.transitionDuration = this.options.animationDelay + 'ms';
      currentItem.style.transform = "translateX(".concat(currentItemPercentage, ")");
    }, 50);
    setTimeout(() => {
      nextItem.removeAttribute('style');
      currentItem.classList.remove('active');
      currentItem.removeAttribute('style');
      this.currentItemIndex = number;
      this.isAnimated = false;
      this.options.autoplay.enabled ? this.play() : '';
    }, this.options.animationDelay + 50);
  }
  /***** [END] Animation Section [END] *****/

  /**
   * Handle indicator click
   * @param {number} i
   * @param {Event} e
   */


  _handleIndicatorClick(i, e) {
    e.preventDefault();

    if (i === this.currentItemIndex) {
      return;
    }

    this.goTo(i);
  }

  _getPreviousItemIndex(step) {
    var previousItemIndex = 0;
    var index = this.currentItemIndex;

    for (var i = 0; i < step; i++) {
      if (index > 0) {
        previousItemIndex = index - 1;
        index--;
      } else {
        index = this.childrens.length - 1;
        previousItemIndex = index;
      }
    }

    return previousItemIndex;
  }

  _getNextItemIndex(step) {
    var nextItemIndex = 0;
    var index = this.currentItemIndex;

    for (var i = 0; i < step; i++) {
      if (index < this.childrens.length - 1) {
        nextItemIndex = index + 1;
        index++;
      } else {
        index = 0;
        nextItemIndex = index;
      }
    }

    return nextItemIndex;
  }
  /**
   * Update height of caroulix container
   * @param {number} indexRef
   */


  updateHeight(indexRef) {
    this.options.fixedHeight ? this._setMaxHeight() : this._setDynamicHeight(indexRef);
  }
  /**
   * Go to {n} item
   * @param {number} number
   * @param {string} side
   */


  goTo(number, side) {
    if (this.isAnimated || number === this.currentItemIndex) {
      return;
    }

    side ? '' : number > this.currentItemIndex ? side = 'right' : side = 'left';
    this.options.autoplay.enabled && this.autoTimeout ? this.stop() : '';
    Axentix.createEvent(this.el, 'caroulix.slide', {
      side,
      nextElement: this.childrens[number],
      currentElement: this.childrens[this.currentItemIndex]
    });
    this.isAnimated = true;
    var animFunction = '_animation' + this.options.animationType.charAt(0).toUpperCase() + this.options.animationType.substring(1);

    if (this.options.indicators.enabled) {
      Array.from(this.indicators.children).map(li => {
        li.removeAttribute('class');
      });
      this.indicators.children[number].classList.add('active');
    }

    this.options.fixedHeight ? '' : this.updateHeight(number);
    this[animFunction](number, side);
  }

  prev() {
    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    if (this.isAnimated) {
      return;
    }

    Axentix.createEvent(this.el, 'caroulix.prev', {
      step
    });

    var previousItemIndex = this._getPreviousItemIndex(step);

    this.goTo(previousItemIndex, 'left');
  }

  next() {
    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    if (this.isAnimated) {
      return;
    }

    Axentix.createEvent(this.el, 'caroulix.next', {
      step
    });

    var nextItemIndex = this._getNextItemIndex(step);

    this.goTo(nextItemIndex, 'right');
  }

  play() {
    this.autoTimeout = setTimeout(() => {
      this.options.autoplay.side === 'right' ? this.next() : this.prev();
    }, this.options.autoplay.interval);
  }

  stop() {
    clearTimeout(this.autoTimeout);
    this.autoTimeout = false;
  }

}

Axentix.Caroulix = Caroulix;
/**
 * Class Collapsible
 * @class
 */

class Collapsible extends AxentixComponent {
  /**
   * Construct Collapsible instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultOptions = {
      animationDelay: 300,
      sidenav: {
        activeClass: true,
        activeWhenOpen: true,
        autoCloseOtherCollapsible: true
      }
    };
    this.el = document.querySelector(element);
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }
  /**
   * Setup component
   */


  _setup() {
    Axentix.createEvent(this.el, 'collapsible.setup');
    this.el.Collapsible = this;
    this.collapsibleTriggers = document.querySelectorAll('.collapsible-trigger');
    this.isInitialStart = true;
    this.isActive = this.el.classList.contains('active') ? true : false;
    this.isAnimated = false;
    this.isInSidenav = false;
    this.childIsActive = false;

    this._setupListeners();

    this.el.style.transitionDuration = this.options.animationDelay + 'ms';

    this._detectSidenav();

    this._detectChild();

    this.options.sidenav.activeClass ? this._addActiveInSidenav() : '';
    this.isActive ? this.open() : '';
    this.isInitialStart = false;
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    this.listenerRef = this._onClickTrigger.bind(this);
    this.collapsibleTriggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        trigger.addEventListener('click', this.listenerRef);
      }
    });
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    this.collapsibleTriggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        trigger.removeEventListener('click', this.listenerRef);
      }
    });
    this.listenerRef = undefined;
  }
  /**
   * Check if collapsible is in sidenav
   */


  _detectSidenav() {
    var sidenavElem = this.el.closest('.sidenav');

    if (sidenavElem) {
      this.isInSidenav = true;
      this.sidenavId = sidenavElem.id;
    }

    this.sidenavCollapsibles = document.querySelectorAll('#' + this.sidenavId + ' .collapsible');
  }
  /**
   * Check if collapsible have active childs
   */


  _detectChild() {
    for (var child of this.el.children) {
      if (child.classList.contains('active')) {
        this.childIsActive = true;
        break;
      }
    }
  }
  /**
   * Add active class to trigger and collapsible
   */


  _addActiveInSidenav() {
    if (this.childIsActive && this.isInSidenav) {
      var triggers = document.querySelectorAll('.sidenav .collapsible-trigger');
      triggers.forEach(trigger => {
        if (trigger.dataset.target === this.el.id) {
          trigger.classList.add('active');
        }
      });
      this.el.classList.add('active');
      this.open();
      this.isActive = true;
    }
  }
  /**
   * Enable / disable active state to trigger when collapsible is in sidenav
   * @param {boolean} state enable or disable
   */


  _addActiveToTrigger(state) {
    var triggers = document.querySelectorAll('.sidenav .collapsible-trigger');
    triggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        state ? trigger.classList.add('active') : trigger.classList.remove('active');
      }
    });
  }
  /**
   * Auto close others collapsible
   */


  _autoCloseOtherCollapsible() {
    if (!this.isInitialStart && this.isInSidenav) {
      this.sidenavCollapsibles.forEach(collapsible => {
        if (collapsible.id !== this.el.id) {
          collapsible.Collapsible.close();
        }
      });
    }
  }
  /**
   * Apply overflow hidden and automatically remove
   */


  _applyOverflow() {
    this.el.style.overflow = 'hidden';
    setTimeout(() => {
      this.el.style.overflow = '';
    }, this.options.animationDelay);
  }
  /**
   * Handle click on trigger
   * @param {Event} e
   */


  _onClickTrigger(e) {
    e.preventDefault();

    if (this.isAnimated) {
      return;
    }

    this.isActive ? this.close() : this.open();
  }
  /**
   * Open collapsible
   */


  open() {
    if (this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'collapsible.open');
    this.isActive = true;
    this.isAnimated = true;
    this.el.style.display = 'block';

    this._applyOverflow();

    this.el.style.maxHeight = this.el.scrollHeight + 'px';
    this.options.sidenav.activeWhenOpen ? this._addActiveToTrigger(true) : '';
    this.options.sidenav.autoCloseOtherCollapsible ? this._autoCloseOtherCollapsible() : '';
    setTimeout(() => {
      this.isAnimated = false;
    }, this.options.animationDelay);
  }
  /**
   * Close collapsible
   */


  close() {
    if (!this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'collapsible.close');
    this.isAnimated = true;
    this.el.style.maxHeight = '';

    this._applyOverflow();

    this.options.sidenav.activeWhenOpen ? this._addActiveToTrigger(false) : '';
    setTimeout(() => {
      this.el.style.display = '';
      this.isAnimated = false;
      this.isActive = false;
    }, this.options.animationDelay);
  }

}

Axentix.Collapsible = Collapsible;
/**
 * Class Dropdown
 * @class
 */

class Dropdown extends AxentixComponent {
  /**
   * Construct Dropdown instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultOptions = {
      animationDelay: 300,
      animationType: 'none',
      hover: false
    };
    this.el = document.querySelector(element);
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }
  /**
   * Setup component
   */


  _setup() {
    Axentix.createEvent(this.el, 'dropdown.setup');
    this.dropdownContent = document.querySelector('#' + this.el.id + ' .dropdown-content');
    this.dropdownTrigger = document.querySelector('#' + this.el.id + ' .dropdown-trigger');
    this.isAnimated = false;
    this.isActive = this.el.classList.contains('active') ? true : false;

    if (this.options.hover) {
      this.el.classList.add('active-hover');
    } else {
      this._setupListeners();
    }

    this._setupAnimation();
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    if (this.options.hover) {
      return;
    }

    this.listenerRef = this._onClickTrigger.bind(this);
    this.dropdownTrigger.addEventListener('click', this.listenerRef);
    this.documentClickRef = this._onDocumentClick.bind(this);
    document.addEventListener('click', this.documentClickRef, true);
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    if (this.options.hover) {
      return;
    }

    this.dropdownTrigger.removeEventListener('click', this.listenerRef);
    this.listenerRef = undefined;
    document.removeEventListener('click', this.documentClickRef, true);
    this.documentClickRef = undefined;
  }
  /**
   * Check and init animation
   */


  _setupAnimation() {
    var animationList = ['none', 'fade'];
    this.options.animationType = this.options.animationType.toLowerCase();
    animationList.includes(this.options.animationType) ? '' : this.options.animationType = 'none';

    if (this.options.animationType !== 'none' && !this.options.hover) {
      if (this.options.hover) {
        this.el.style.animationDuration = this.options.animationDelay + 'ms';
      } else {
        this.el.style.transitionDuration = this.options.animationDelay + 'ms';
      }

      this.el.classList.add('anim-' + this.options.animationType);
    }
  }
  /**
   * Handle click on document click
   */


  _onDocumentClick(e) {
    if (e.target.matches('.dropdown-trigger')) {
      return;
    }

    if (this.isAnimated || !this.isActive) {
      return;
    }

    this.close();
  }
  /**
   * Handle click on trigger
   */


  _onClickTrigger(e) {
    e.preventDefault();

    if (this.isAnimated) {
      return;
    }

    this.isActive ? this.close() : this.open();
  }
  /**
   * Open dropdown
   */


  open() {
    if (this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'dropdown.open');
    this.dropdownContent.style.display = 'flex';
    setTimeout(() => {
      this.el.classList.add('active');
      this.isActive = true;
    }, 10);

    if (this.options.animationType !== 'none') {
      this.isAnimated = true;
      setTimeout(() => {
        this.isAnimated = false;
        Axentix.createEvent(this.el, 'dropdown.opened');
      }, this.options.animationDelay);
    } else {
      Axentix.createEvent(this.el, 'dropdown.opened');
    }
  }
  /**
   * Close dropdown
   */


  close() {
    if (!this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'dropdown.close');
    this.el.classList.remove('active');

    if (this.options.animationType !== 'none') {
      this.isAnimated = true;
      setTimeout(() => {
        this.dropdownContent.style.display = '';
        this.isAnimated = false;
        this.isActive = false;
        Axentix.createEvent(this.el, 'dropdown.closed');
      }, this.options.animationDelay);
    } else {
      this.dropdownContent.style.display = '';
      this.isAnimated = false;
      this.isActive = false;
      Axentix.createEvent(this.el, 'dropdown.closed');
    }
  }

}

Axentix.Dropdown = Dropdown;
/**
 * Class Fab
 * @class
 */

class Fab extends AxentixComponent {
  /**
   * Construct Fab instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultOptions = {
      animationDelay: 300,
      hover: true,
      direction: 'top',
      position: 'bottom-right',
      offsetX: '1rem',
      offsetY: '1.5rem'
    };
    this.el = document.querySelector(element);
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }
  /**
   * Setup component
   */


  _setup() {
    Axentix.createEvent(this.el, 'fab.setup');
    this.isAnimated = false;
    this.isActive = false;
    this.trigger = document.querySelector('#' + this.el.id + ' .fab-trigger');
    this.fabMenu = document.querySelector('#' + this.el.id + ' .fab-menu');

    this._verifOptions();

    this._setupListeners();

    this.el.style.transitionDuration = this.options.animationDelay + 'ms';

    this._setProperties();
  }
  /**
   * Options check
   */


  _verifOptions() {
    var directionList = ['right', 'left', 'top', 'bottom'];
    directionList.includes(this.options.direction) ? '' : this.options.direction = 'top';
    var positionList = ['top-right', 'top-left', 'bottom-right', 'bottom-left'];
    positionList.includes(this.options.position) ? '' : this.options.position = 'bottom-right';
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    if (this.options.hover) {
      this.openRef = this.open.bind(this);
      this.closeRef = this.close.bind(this);
      this.el.addEventListener('mouseenter', this.openRef);
      this.el.addEventListener('mouseleave', this.closeRef);
    } else {
      this.listenerRef = this._onClickTrigger.bind(this);
      this.el.addEventListener('click', this.listenerRef);
    }

    this.documentClickRef = this._handleDocumentClick.bind(this);
    document.addEventListener('click', this.documentClickRef, true);
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    if (this.options.hover) {
      this.el.removeEventListener('mouseenter', this.openRef);
      this.el.removeEventListener('mouseleave', this.closeRef);
      this.openRef = undefined;
      this.closeRef = undefined;
    } else {
      this.el.removeEventListener('click', this.listenerRef);
      this.listenerRef = undefined;
    }

    document.removeEventListener('click', this.documentClickRef, true);
    this.documentClickRef = undefined;
  }
  /**
   * Set different options on element
   */


  _setProperties() {
    this.options.position.split('-')[0] === 'top' ? this.el.style.top = this.options.offsetY : this.el.style.bottom = this.options.offsetY;
    this.options.position.split('-')[1] === 'right' ? this.el.style.right = this.options.offsetX : this.el.style.left = this.options.offsetX;
    this.options.direction === 'top' || this.options.direction === 'bottom' ? '' : this.el.classList.add('fab-dir-x');

    this._setMenuPosition();
  }
  /**
   * Set menu position
   */


  _setMenuPosition() {
    if (this.options.direction === 'top' || this.options.direction === 'bottom') {
      var height = this.trigger.clientHeight;
      this.options.direction === 'top' ? this.fabMenu.style.bottom = height + 'px' : this.fabMenu.style.top = height + 'px';
    } else {
      var width = this.trigger.clientWidth;
      this.options.direction === 'right' ? this.fabMenu.style.left = width + 'px' : this.fabMenu.style.right = width + 'px';
    }
  }
  /**
   * Handle document click event
   * @param {Event} e
   */


  _handleDocumentClick(e) {
    var isInside = this.el.contains(e.target);
    !isInside && this.isActive ? this.close() : '';
  }
  /**
   * Handle click on trigger
   * @param {Event} e
   */


  _onClickTrigger(e) {
    e.preventDefault();

    if (this.isAnimated) {
      return;
    }

    this.isActive ? this.close() : this.open();
  }
  /**
   * Open fab
   */


  open() {
    if (this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'fab.open');
    this.isAnimated = true;
    this.isActive = true;
    this.el.classList.add('active');
    setTimeout(() => {
      this.isAnimated = false;
    }, this.options.animationDelay);
  }
  /**
   * Close fab
   */


  close() {
    if (!this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'fab.close');
    this.isAnimated = true;
    this.isActive = false;
    this.el.classList.remove('active');
    setTimeout(() => {
      this.isAnimated = false;
    }, this.options.animationDelay);
  }

}

Axentix.Fab = Fab;
Axentix.inputElements = document.querySelectorAll('.form-material .form-field:not(.form-default) .form-control');
/**
 * Detect attribute & state of all inputs
 * @param {NodeListOf<Element>} inputElements
 */

Axentix.detectAllInputs = function (inputElements) {
  inputElements ? '' : inputElements = Axentix.inputElements;
  inputElements.forEach(input => {
    Axentix.detectInput(input);
  });
};
/**
 * Detect attribute & state of an input
 * @param {Element} input
 */


Axentix.detectInput = function (input) {
  Axentix.createEvent(input, 'form.input');
  var isActive = input.parentElement.classList.contains('active');
  var hasContent = input.value.length > 0 || input.placeholder.length > 0 || input.matches('[type="date"]') || input.matches('[type="month"]') || input.matches('[type="week"]') || input.matches('[type="time"]');
  var isFocused = document.activeElement === input;
  var isDisabled = input.hasAttribute('disabled') || input.hasAttribute('readonly');

  if (input.firstInit) {
    Axentix.updateInput(input, isActive, hasContent, isFocused);
    input.firstInit = false;
  } else {
    isDisabled ? '' : Axentix.updateInput(input, isActive, hasContent, isFocused);
  }
};
/**
 * Update input field
 * @param {Element} input
 * @param {boolean} isActive
 * @param {boolean} hasContent
 * @param {boolean} isFocused
 */


Axentix.updateInput = function (input, isActive, hasContent, isFocused) {
  var isTextArea = input.type === 'textarea';

  if (!isActive && (hasContent || isFocused)) {
    isTextArea ? '' : Axentix.setFormPosition(input);
    input.parentElement.classList.add('active');
  } else if (isActive && !(hasContent || isFocused)) {
    input.parentElement.classList.remove('active');
  }

  isFocused && !isTextArea ? input.parentElement.classList.add('is-focused') : input.parentElement.classList.remove('is-focused');
  isFocused && isTextArea ? input.parentElement.classList.add('is-txtarea-focused') : input.parentElement.classList.remove('is-txtarea-focused');
};
/**
 * Add bottom position variable to form
 * @param {Element} input
 */


Axentix.setFormPosition = function (input) {
  var style = window.getComputedStyle(input.parentElement);
  var height = parseFloat(input.clientHeight),
      padding = parseFloat(style.paddingTop),
      border = parseFloat(style.borderTopWidth);
  var pos = padding + border + height + 'px';
  input.parentElement.style.setProperty('--form-material-position', pos);
};
/**
 * Handle listeners
 * @param {Event} e
 * @param {NodeListOf<Element>} inputElements
 */


Axentix.handleListeners = function (e, inputElements) {
  inputElements.forEach(input => {
    input === e.target ? Axentix.detectInput(input) : '';
  });
};
/**
 * Handle form reset event
 * @param {Event} e
 */


Axentix.handleResetEvent = function (e) {
  if (e.target.tagName === 'FORM' && e.target.classList.contains('form-material')) {
    setTimeout(() => {
      Axentix.detectAllInputs();
    }, 10);
  }
};
/**
 * Setup forms fields listeners
 * @param {NodeListOf<Element>} inputElements
 */


Axentix.setupFormsListeners = function (inputElements) {
  inputElements ? '' : inputElements = Axentix.inputElements;
  inputElements.forEach(input => {
    input.addEventListener('input', Axentix.detectInput(input));
    input.firstInit = true;
  });
  document.addEventListener('focus', e => Axentix.handleListeners(e, inputElements), true);
  document.addEventListener('blur', e => Axentix.handleListeners(e, inputElements), true);
  window.addEventListener('pageshow', () => {
    setTimeout(() => {
      Axentix.detectAllInputs();
    }, 10);
  });
  document.addEventListener('reset', Axentix.handleResetEvent);
}; // Init


document.addEventListener('DOMContentLoaded', () => {
  if (Axentix.inputElements.length > 0) {
    Axentix.setupFormsListeners();
    Axentix.detectAllInputs();
  }
});
/**
 * Class Modal
 * @class
 */

class Modal extends AxentixComponent {
  /**
   * Construct Modal instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultOptions = {
      overlay: true,
      bodyScrolling: false,
      animationDelay: 400
    };
    this.el = document.querySelector(element);
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }
  /**
   * Setup component
   */


  _setup() {
    Axentix.createEvent(this.el, 'modal.setup');
    this.modalTriggers = document.querySelectorAll('.modal-trigger');
    this.isActive = this.el.classList.contains('active') ? true : false;
    this.isAnimated = false;

    this._setupListeners();

    this.options.overlay ? this._createOverlay() : '';
    this.el.style.transitionDuration = this.options.animationDelay + 'ms';
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    this.listenerRef = this._onClickTrigger.bind(this);
    this.modalTriggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        trigger.addEventListener('click', this.listenerRef);
      }
    });
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    this.modalTriggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        trigger.removeEventListener('click', this.listenerRef);
      }
    });
    this.listenerRef = undefined;
  }
  /**
   * Create overlay element
   */


  _createOverlay() {
    if (this.isActive && this.options.overlay) {
      this.overlayElement = document.querySelector('.modal-overlay[data-target="' + this.el.id + '"]');
      this.overlayElement ? '' : this.overlayElement = document.createElement('div');
    } else {
      this.overlayElement = document.createElement('div');
    }

    this.overlayElement.classList.add('modal-overlay');
    this.overlayElement.style.transitionDuration = this.options.animationDelay + 'ms';
    this.overlayElement.dataset.target = this.el.id;
  }
  /**
   * Enable or disable body scroll when option is true
   * @param {boolean} state Enable or disable body scroll
   */


  _toggleBodyScroll(state) {
    if (!this.options.bodyScrolling) {
      state ? document.body.style.overflow = '' : document.body.style.overflow = 'hidden';
    }
  }
  /**
   * Set Z-Index when modal is open
   */


  _setZIndex() {
    var totalModals = document.querySelectorAll('.modal.active').length + 1;
    this.options.overlay ? this.overlayElement.style.zIndex = 800 + totalModals * 6 : '';
    this.el.style.zIndex = 800 + totalModals * 10;
  }
  /**
   * Handle click on trigger
   */


  _onClickTrigger(e) {
    e.preventDefault();

    if (this.isAnimated) {
      return;
    }

    this.isActive ? this.close() : this.open();
  }
  /**
   * Open the modal
   */


  open() {
    if (this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'modal.open');
    this.isActive = true;
    this.isAnimated = true;

    this._setZIndex();

    this.el.style.display = 'block';
    this.overlay(true);

    this._toggleBodyScroll(false);

    setTimeout(() => {
      this.el.classList.add('active');
    }, 50);
    setTimeout(() => {
      this.isAnimated = false;
      Axentix.createEvent(this.el, 'modal.opened');
    }, this.options.animationDelay);
  }
  /**
   * Close the modal
   */


  close() {
    if (!this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'modal.close');
    this.isAnimated = true;
    this.el.classList.remove('active');
    this.overlay(false);
    setTimeout(() => {
      this.el.style.display = '';
      this.isAnimated = false;
      this.isActive = false;

      this._toggleBodyScroll(true);

      Axentix.createEvent(this.el, 'modal.closed');
    }, this.options.animationDelay);
  }
  /**
   * Manage overlay
   * @param {boolean} state
   */


  overlay(state) {
    if (this.options.overlay) {
      if (state) {
        this.overlayElement.addEventListener('click', this.listenerRef);
        document.body.appendChild(this.overlayElement);
        setTimeout(() => {
          this.overlayElement.classList.add('active');
        }, 50);
      } else {
        this.overlayElement.classList.remove('active');
        setTimeout(() => {
          this.overlayElement.removeEventListener('click', this.listenerRef);
          document.body.removeChild(this.overlayElement);
        }, this.options.animationDelay);
      }
    }
  }

}

Axentix.Modal = Modal;
/**
 * Class Sidenav
 * @class
 */

class Sidenav extends AxentixComponent {
  /**
   * Construct Sidenav instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultOptions = {
      overlay: true,
      bodyScrolling: false,
      animationDelay: 300
    };
    this.el = document.querySelector(element);
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }
  /**
   * Setup component
   */


  _setup() {
    Axentix.createEvent(this.el, 'sidenav.setup');
    this.sidenavTriggers = document.querySelectorAll('.sidenav-trigger');
    this.isActive = false;
    this.isFixed = this.el.classList.contains('fixed');
    this.isLarge = this.el.classList.contains('large');

    this._setupListeners();

    this.options.overlay ? this._createOverlay() : '';
    this.el.classList.contains('large') ? document.body.classList.add('sidenav-large') : document.body.classList.remove('sidenav-large');

    this._handleRightSidenav();

    this.el.style.transitionDuration = this.options.animationDelay + 'ms';
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    this.listenerRef = this._onClickTrigger.bind(this);
    this.sidenavTriggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        trigger.addEventListener('click', this.listenerRef);
      }
    });
    this.windowResizeRef = this.close.bind(this);
    window.addEventListener('resize', this.windowResizeRef);
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    this.sidenavTriggers.forEach(trigger => {
      if (trigger.dataset.target === this.el.id) {
        trigger.removeEventListener('click', this.listenerRef);
      }
    });
    this.listenerRef = undefined;
    window.removeEventListener('resize', this.windowResizeRef);
    this.windowResizeRef = undefined;
  }
  /**
   * Handle right sidenav detection
   */


  _handleRightSidenav() {
    var sidenavs = document.querySelectorAll('.sidenav');
    var found = Array.from(sidenavs).some(sidenav => sidenav.classList.contains('right-aligned'));

    if (found && !document.body.classList.contains('sidenav-right')) {
      document.body.classList.add('sidenav-right');
    } else if (!found && document.body.classList.contains('sidenav-right')) {
      document.body.classList.remove('sidenav-right');
    }
  }
  /**
   * Create overlay element
   */


  _createOverlay() {
    this.overlayElement = document.createElement('div');
    this.overlayElement.classList.add('sidenav-overlay');
    this.overlayElement.dataset.target = this.el.id;
  }
  /**
   * Enable or disable body scroll when option is true
   * @param {boolean} state
   */


  _toggleBodyScroll(state) {
    if (!this.options.bodyScrolling) {
      state ? document.body.style.overflow = '' : document.body.style.overflow = 'hidden';
    }
  }
  /**
   * Handle click on trigger
   * @param {Event} e
   */


  _onClickTrigger(e) {
    e.preventDefault();

    if (this.isFixed && window.innerWidth >= 960) {
      return;
    }

    this.isActive ? this.close() : this.open();
  }
  /**
   * Open sidenav
   */


  open() {
    if (this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'sidenav.open');
    this.isActive = true;
    this.el.classList.add('active');
    this.overlay(true);

    this._toggleBodyScroll(false);

    setTimeout(() => {
      Axentix.createEvent(this.el, 'sidenav.opened');
    }, this.options.animationDelay);
  }
  /**
   * Close sidenav
   */


  close() {
    if (!this.isActive) {
      return;
    }

    Axentix.createEvent(this.el, 'sidenav.close');
    this.el.classList.remove('active');
    this.overlay(false);
    setTimeout(() => {
      this._toggleBodyScroll(true);

      this.isActive = false;
      Axentix.createEvent(this.el, 'sidenav.closed');
    }, this.options.animationDelay);
  }
  /**
   * Manage overlay
   * @param {boolean} state
   */


  overlay(state) {
    if (this.options.overlay) {
      if (state) {
        this.overlayElement.addEventListener('click', this.listenerRef);
        document.body.appendChild(this.overlayElement);
      } else {
        this.overlayElement.removeEventListener('click', this.listenerRef);
        document.body.removeChild(this.overlayElement);
      }
    }
  }

}

Axentix.Sidenav = Sidenav;
/**
 * Class Tab
 * @class
 */

class Tab extends AxentixComponent {
  /**
   * Construct Tab instance
   * @constructor
   * @param {String} element
   * @param {Object} options
   */
  constructor(element, options) {
    super();
    this.defaultAnimDelay = 300;
    this.caroulixOptions = {
      animationDelay: this.defaultAnimDelay,
      autoplay: {
        enabled: false
      }
    };
    this.defaultOptions = {
      animationDelay: this.defaultAnimDelay,
      animationType: 'none',
      caroulix: {}
    };
    this.el = document.querySelector(element);
    this.elQuery = element;
    this.options = Axentix.extend(this.defaultOptions, options);

    this._setup();
  }
  /**
   * Setup component
   */


  _setup() {
    Axentix.createEvent(this.el, 'tab.setup');
    var animationList = ['none', 'slide'];
    animationList.includes(this.options.animationType) ? '' : this.options.animationType = 'none';
    this.isAnimated = false;
    this.resizeEventDelay = 0;
    this.tabArrow = document.querySelector(this.elQuery + ' .tab-arrow');
    this.tabLinks = document.querySelectorAll(this.elQuery + ' .tab-menu .tab-link');
    this.tabMenu = document.querySelector(this.elQuery + ' .tab-menu');

    this._getItems();

    if (this.tabArrow) {
      this._toggleArrowMode();

      this.leftArrow = document.querySelector(this.elQuery + ' .tab-arrow .tab-prev');
      this.rightArrow = document.querySelector(this.elQuery + ' .tab-arrow .tab-next');
    }

    this._setupListeners();

    this.el.style.transitionDuration = this.options.animationDelay + 'ms';
    this.options.animationType === 'slide' ? this._enableSlideAnimation() : this.updateActiveElement();
  }
  /**
   * Setup listeners
   */


  _setupListeners() {
    this.tabLinks.forEach(item => {
      item.listenerRef = this._onClickItem.bind(this, item);
      item.addEventListener('click', item.listenerRef);
    });
    this.resizeTabListener = this._handleResizeEvent.bind(this);
    window.addEventListener('resize', this.resizeTabListener);

    if (this.tabArrow) {
      this.arrowListener = this._toggleArrowMode.bind(this);
      window.addEventListener('resize', this.arrowListener);
      this.scrollLeftListener = this._scrollLeft.bind(this);
      this.scrollRightLstener = this._scrollRight.bind(this);
      this.leftArrow.addEventListener('click', this.scrollLeftListener);
      this.rightArrow.addEventListener('click', this.scrollRightLstener);
    }
  }
  /**
   * Remove listeners
   */


  _removeListeners() {
    this.tabLinks.forEach(item => {
      item.removeEventListener('click', item.listenerRef);
      item.listenerRef = undefined;
    });
    window.removeEventListener('resize', this.resizeTabListener);
    this.resizeTabListener = undefined;

    if (this.tabArrow) {
      window.removeEventListener('resize', this.arrowListener);
      this.arrowListener = undefined;
      this.leftArrow.removeEventListener('click', this.scrollLeftListener);
      this.rightArrow.removeEventListener('click', this.scrollRightLstener);
      this.scrollLeftListener = undefined;
      this.scrollRightLstener = undefined;
    }
  }

  _handleResizeEvent() {
    this.updateActiveElement();

    for (var i = 100; i < 500; i += 100) {
      setTimeout(() => {
        this.updateActiveElement();
      }, i);
    }
  }
  /**
   * Get all items
   */


  _getItems() {
    this.tabItems = Array.from(this.el.children).reduce((acc, child) => {
      !child.classList.contains('tab-menu') && !child.classList.contains('tab-arrow') ? acc.push(child) : '';
      return acc;
    }, []);
  }
  /**
   * Hide all tab items
   */


  _hideContent() {
    this.tabItems.map(item => item.style.display = 'none');
  }
  /**
   * Init slide animation
   */


  _enableSlideAnimation() {
    this.tabItems.map(item => item.classList.add('caroulix-item'));
    this.tabCaroulix = Axentix.wrap(this.tabItems);
    this.tabCaroulix.classList.add('caroulix');
    var nb = Math.random().toString().split('.')[1];
    this.tabCaroulix.id = 'tab-caroulix-' + nb;
    this.tabCaroulixInit = true;
    this.options.caroulix = Axentix.extend(this.caroulixOptions, this.options.caroulix);
    this.options.animationDelay !== this.defaultAnimDelay ? this.options.caroulix.animationDelay = this.options.animationDelay : '';
    this.updateActiveElement();
  }
  /**
   * Set active bar position
   * @param {Element} element
   */


  _setActiveElement(element) {
    this.tabLinks.forEach(item => item.classList.remove('active'));
    var elementRect = element.getBoundingClientRect();
    var elementPosLeft = elementRect.left;
    var menuPosLeft = this.tabMenu.getBoundingClientRect().left;
    var left = elementPosLeft - menuPosLeft + this.tabMenu.scrollLeft;
    var elementWidth = elementRect.width;
    var right = this.tabMenu.clientWidth - left - elementWidth;
    this.tabMenu.style.setProperty('--tab-bar-left-offset', Math.floor(left) + 'px');
    this.tabMenu.style.setProperty('--tab-bar-right-offset', Math.ceil(right) + 'px');
    element.classList.add('active');
  }
  /**
   * Toggle arrow mode
   */


  _toggleArrowMode() {
    var totalWidth = Array.from(this.tabLinks).reduce((acc, element) => {
      acc += element.clientWidth;
      return acc;
    }, 0);
    var arrowWidth = this.tabArrow.clientWidth;

    if (totalWidth > arrowWidth) {
      this.tabArrow.classList.contains('tab-arrow-show') ? '' : this.tabArrow.classList.add('tab-arrow-show');
    } else {
      this.tabArrow.classList.contains('tab-arrow-show') ? this.tabArrow.classList.remove('tab-arrow-show') : '';
    }

    this.updateActiveElement();
  }
  /**
   * Scroll left
   * @param {Event} e
   */


  _scrollLeft(e) {
    e.preventDefault();
    this.tabMenu.scrollLeft -= 40;
  }
  /**
   * Scroll right
   * @param {Event} e
   */


  _scrollRight(e) {
    e.preventDefault();
    this.tabMenu.scrollLeft += 40;
  }
  /**
   * Handle click on menu item
   * @param {Element} item
   * @param {Event} e
   */


  _onClickItem(item, e) {
    e.preventDefault();

    if (this.isAnimated || item.classList.contains('active')) {
      return;
    }

    var target = item.children[0].getAttribute('href');
    this.select(target.split('#')[1]);
  }
  /**
   * Select tab
   * @param {String} itemId
   */


  select(itemId) {
    if (this.isAnimated) {
      return;
    }

    this.isAnimated = true;
    var menuItem = document.querySelector(this.elQuery + ' .tab-menu a[href="#' + itemId + '"]');
    Axentix.createEvent(menuItem, 'tab.select');

    this._setActiveElement(menuItem.parentElement);

    if (this.tabCaroulixInit) {
      this.tabItems.map(item => item.id === itemId ? item.classList.add('active') : '');
      this.caroulixInstance = new Caroulix('#' + this.tabCaroulix.id, this.options.caroulix);
      this.tabCaroulixInit = false;
      this.isAnimated = false;
      return;
    }

    if (this.options.animationType === 'slide') {
      var nb = this.tabItems.findIndex(item => item.id === itemId);
      this.caroulixInstance.goTo(nb);
      setTimeout(() => {
        this.isAnimated = false;
      }, this.options.animationDelay);
    } else {
      this._hideContent();

      this.tabItems.map(item => item.id === itemId ? item.style.display = 'block' : '');
      this.isAnimated = false;
    }
  }
  /**
   * Detect active element & update component
   */


  updateActiveElement() {
    var itemSelected;
    this.tabLinks.forEach(item => {
      item.classList.contains('active') ? itemSelected = item : '';
    });
    itemSelected ? '' : itemSelected = this.tabLinks.item(0);
    var target = itemSelected.children[0].getAttribute('href');
    this.select(target.split('#')[1]);
  }

}

Axentix.Tab = Tab;
/**
 * Class Toast
 * @class
 */

class Toast {
  /**
   * Construct Toast instance
   * @constructor
   * @param {String} content
   * @param {Object} options
   */
  constructor(content, options) {
    this.defaultOptions = {
      animationDelay: 400,
      duration: 4000,
      classes: '',
      position: 'right',
      direction: 'top',
      mobileDirection: 'bottom',
      isClosable: false
    };

    if (Axentix.toastInstanceExist) {
      console.error("Don't try to create multiple toast instances");
      return;
    } else {
      Axentix.toastInstanceExist = true;
    }

    this.content = content;
    this.options = Axentix.extend(this.defaultOptions, options);
    this.options.position = this.options.position.toLowerCase();
    this.options.direction = this.options.direction.toLowerCase();
    this.options.mobileDirection = this.options.mobileDirection.toLowerCase();
    this.toasters = {};
  }
  /**
   * Create toast container
   */


  _createToaster() {
    var toaster = document.createElement('div');
    var positionList = ['right', 'left'];
    positionList.includes(this.options.position) ? '' : this.options.position = 'right';
    var directionList = ['bottom', 'top'];
    directionList.includes(this.options.direction) ? '' : this.options.direction = 'top';
    directionList.includes(this.options.mobileDirection) ? '' : this.options.mobileDirection = 'bottom';
    toaster.className = 'toaster toaster-' + this.options.position + ' toast-' + this.options.direction + ' toaster-mobile-' + this.options.mobileDirection;
    this.toasters[this.options.position] = toaster;
    document.body.appendChild(toaster);
  }
  /**
   * Remove toast container
   */


  _removeToaster() {
    for (var key in this.toasters) {
      var toaster = this.toasters[key];

      if (toaster.childElementCount <= 0) {
        toaster.remove();
        delete this.toasters[key];
      }
    }
  }
  /**
   * Toast in animation
   * @param {Element} toast
   */


  _fadeInToast(toast) {
    setTimeout(() => {
      Axentix.createEvent(toast, 'toast.show');
      toast.classList.add('toast-animated');
      setTimeout(() => {
        Axentix.createEvent(toast, 'toast.shown');
      }, this.options.animationDelay);
    }, 50);
  }
  /**
   * Toast out animation
   * @param {Element} toast
   */


  _fadeOutToast(toast) {
    setTimeout(() => {
      Axentix.createEvent(toast, 'toast.hide');

      this._hide(toast);
    }, this.options.duration + this.options.animationDelay);
  }
  /**
   * Anim out toast
   * @param {Element} toast
   */


  _animOut(toast) {
    toast.style.transitionTimingFunction = 'cubic-bezier(0.445, 0.05, 0.55, 0.95)';
    toast.style.paddingTop = 0;
    toast.style.paddingBottom = 0;
    toast.style.margin = 0;
    toast.style.height = 0;
  }
  /**
   * Create toast
   */


  _createToast() {
    var toast = document.createElement('div');
    toast.className = 'toast shadow-1 ' + this.options.classes;
    toast.innerHTML = this.content;
    toast.style.transitionDuration = this.options.animationDelay + 'ms';

    if (this.options.isClosable) {
      var trigger = document.createElement('i');
      trigger.className = 'toast-trigger fas fa-times';
      trigger.listenerRef = this._hide.bind(this, toast, trigger);
      trigger.addEventListener('click', trigger.listenerRef);
      toast.appendChild(trigger);
    }

    this._fadeInToast(toast);

    this.toasters[this.options.position].appendChild(toast);

    this._fadeOutToast(toast);

    var height = toast.clientHeight;
    toast.style.height = height + 'px';
  }
  /**
   * Hide toast
   * @param {String} toast
   * @param {Element} trigger
   * @param {Event} e
   */


  _hide(toast, trigger, e) {
    if (toast.isAnimated) {
      return;
    }

    var timer = 1;

    if (e) {
      e.preventDefault();
      timer = 0;
      this.options.isClosable ? trigger.removeEventListener('click', trigger.listenerRef) : '';
    }

    toast.style.opacity = 0;
    toast.isAnimated = true;
    var delay = timer * this.options.animationDelay + this.options.animationDelay;
    setTimeout(() => {
      this._animOut(toast);
    }, delay / 2);
    setTimeout(() => {
      toast.remove();
      Axentix.createEvent(toast, 'toast.remove');

      this._removeToaster();
    }, delay * 1.45);
  }
  /**
   * Showing the toast
   */


  show() {
    if (!Object.keys(this.toasters).includes(this.options.position)) {
      this._createToaster();
    }

    this._createToast();
  }
  /**
   * Change
   * @param {String} content
   * @param {Object} options
   */


  change(content, options) {
    this.content = content;
    this.options = Axentix.extend(this.options, options);
  }

} // By https://gomakethings.com/vanilla-javascript-version-of-jquery-extend/ | MIT License


Axentix.extend = function () {
  var extended = {};
  var deep = false;
  var i = 0;
  var length = arguments.length;

  if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {
    deep = arguments[0];
    i++;
  }

  var merge = function merge(obj) {
    for (var prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {
          extended[prop] = extend(true, extended[prop], obj[prop]);
        } else {
          extended[prop] = obj[prop];
        }
      }
    }
  };

  for (; i < length; i++) {
    var obj = arguments[i];
    merge(obj);
  }

  return extended;
};
/**
 * Wrap content inside an element (<div> by default)
 * @param {Array<Element>} target
 * @param {Element} wrapper
 * @return {Element}
 */


Axentix.wrap = function (target) {
  var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.createElement('div');
  var parent = target[0].parentElement;
  target.forEach(elem => wrapper.appendChild(elem));
  parent.appendChild(wrapper);
  return wrapper;
};
/**
 * Create custom event
 * @param {Element} element
 * @param {string} eventName
 * @param {Object} extraData
 */


Axentix.createEvent = (element, eventName, extraData) => {
  var event = new CustomEvent('ax.' + eventName, {
    detail: extraData || {},
    bubbles: true
  });
  element.dispatchEvent(event);
};