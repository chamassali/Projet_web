/*** Some helpers classes ***/

// Typography
@for $i from 1 to 9 {
  .font-w#{$i}00 {
    font-weight: #{$i}00 !important;
  }
}

/// Shadows
// Box shadows
.shadow-0 {
  box-shadow: none !important;
}
.light-shadow-0 {
  box-shadow: none !important;
}

@each $number, $value in $shadows {
  .shadow-#{$number} {
    box-shadow: #{$value};
  }
}

@each $number, $value in $light-shadows {
  .light-shadow-#{$number} {
    box-shadow: #{$value};
  }
}

// Hoverable
@each $number, $value in $hoverable {
  .hoverable-#{$number}:not(.press):not(.push):not(.outline) {
    transition-property: box-shadow, transform;
    transition-timing-function: ease;
    transition-duration: $hoverable-delay;

    &:hover {
      box-shadow: #{$value} !important;
      transform: translateY(-5px);
    }
  }
}

// Light hoverable
@each $number, $value in $light-hoverable {
  .light-hoverable-#{$number}:not(.press):not(.push):not(.outline) {
    transition-property: box-shadow, transform;
    transition-timing-function: ease-out;
    transition-duration: $light-hoverable-delay;

    &:hover {
      box-shadow: #{$value} !important;
      transform: translateY(-5px);
    }
  }
}

// Drop shadows
.dropshadow-0 {
  filter: none !important;
}

@each $number, $value in $drop-shadows {
  .dropshadow-#{$number} {
    filter: #{$value};
  }
}

// Text shadows
.textshadow-0 {
  text-shadow: none !important;
}

@each $number, $value in $text-shadows {
  .textshadow-#{$number} {
    text-shadow: #{$value};
  }
}

// Width
.w100 {
  width: 100% !important;
}

// Height
.h100 {
  height: 100% !important;
}

// Flex
.flex {
  display: flex;
}

.fx-col {
  flex-direction: column !important;
}

.fx-col-reverse {
  flex-direction: column-reverse !important;
}

.fx-row {
  flex-direction: row !important;
}

.fx-row-reverse {
  flex-direction: row-reverse !important;
}

// Hide elements
.hide {
  display: none !important;
}

@each $name, $value in $breakpoints {
  @media #{$value} {
    .hide-#{$name} {
      display: none !important;
    }
  }
}
@each $name, $value in $extra-breakpoints {
  @media #{$value} {
    .hide-#{$name} {
      display: none !important;
    }
  }
}

// Alignments
.txt-left {
  text-align: left !important;
}

.txt-center {
  text-align: center !important;
}

.txt-right {
  text-align: right !important;
}

.center {
  justify-items: center !important;
}

.left {
  justify-items: start !important;
}

.right {
  justify-items: end !important;
}

.fx-center {
  justify-content: center !important;
}

.fx-right {
  justify-content: flex-end !important;
}

.fx-left {
  justify-content: flex-start !important;
}

.self-center {
  justify-self: center !important;
}

.self-left {
  justify-self: start !important;
}

.self-right {
  justify-self: end !important;
}

.vtop {
  align-items: start !important;
}

.vcenter {
  align-items: center !important;
}

.vbottom {
  align-items: end !important;
}

.vstretch {
  align-items: stretch !important;
}

.vself-top {
  align-self: start !important;
}

.vself-center {
  align-self: center !important;
}

.vself-bottom {
  align-self: end !important;
}

.vself-stretch {
  align-self: stretch !important;
}

.float-left {
  float: left !important;
}

.float-right {
  float: right !important;
}

// Margin / Padding
@each $number, $value in $spaces {
  .m-#{$number} {
    margin: #{$value} !important;
  }

  .mt-#{$number} {
    margin-top: #{$value} !important;
  }

  .mr-#{$number} {
    margin-right: #{$value} !important;
  }

  .mb-#{$number} {
    margin-bottom: #{$value} !important;
  }

  .ml-#{$number} {
    margin-left: #{$value} !important;
  }

  .mx-#{$number} {
    margin-left: #{$value} !important;
    margin-right: #{$value} !important;
  }

  .my-#{$number} {
    margin-top: #{$value} !important;
    margin-bottom: #{$value} !important;
  }

  @if ($value != 'auto') {
    .p-#{$number} {
      padding: #{$value} !important;
    }

    .pt-#{$number} {
      padding-top: #{$value} !important;
    }

    .pr-#{$number} {
      padding-right: #{$value} !important;
    }

    .pb-#{$number} {
      padding-bottom: #{$value} !important;
    }

    .pl-#{$number} {
      padding-left: #{$value} !important;
    }

    .px-#{$number} {
      padding-left: #{$value} !important;
      padding-right: #{$value} !important;
    }

    .py-#{$number} {
      padding-top: #{$value} !important;
      padding-bottom: #{$value} !important;
    }
  }
}

// Truncate
.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Divider
.divider {
  width: 100%;
  border-bottom: solid;
  border-width: thin;
  border-color: rgba(0, 0, 0, 0.3);
}

// Blockquote
.blockquote {
  border-left: 5px solid getColor('primary');
  margin: 0;
  padding: 1rem 2rem;
}

// Container
.container {
  width: 75%;
  @extend .mx-auto;

  @include responsive('sm-down') {
    width: 85%;
  }

  @include responsive('xs') {
    width: 90%;
  }
}

// Rounded
.rounded-0 {
  border-radius: 0 !important;
}

@each $name, $value in $rounded {
  .rounded-#{$name} {
    border-radius: #{$value};
  }
}

// Text format
.lowercase {
  text-transform: lowercase !important;
}

.uppercase {
  text-transform: uppercase !important;
}

.capitalize {
  text-transform: capitalize !important;
}

// Positions
.absolute-pos {
  position: absolute !important;
}

.fixed-pos {
  position: fixed !important;
}

.relative-pos {
  position: relative !important;
}

// Cursors
@each $cursor in $cursors {
  .cursor-#{$cursor} {
    cursor: #{$cursor} !important;
  }
}

// Overflows
@each $overflow in $overflows {
  .overflow-#{$overflow} {
    overflow: #{$overflow} !important;
  }

  .overflow-x-#{$overflow} {
    overflow-x: #{$overflow} !important;
  }

  .overflow-y-#{$overflow} {
    overflow-y: #{$overflow} !important;
  }
}
